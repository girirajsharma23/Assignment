package utilities;


import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;

import org.openqa.selenium.WebDriver;
import org.testng.Assert;

import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

public class FileReader
{
	static String downloadPath="C:\\Users\\Our Dream\\Downloads";
	public static FileInputStream readFile(String FilePath, Properties prop)
	{
		File file = new File(FilePath);
		FileInputStream fileInput = null;
		try
		{
			fileInput = new FileInputStream(file);
		}
		catch (FileNotFoundException e)
		{
		}
		try
		{
			prop.load(fileInput);
		}
		catch (IOException e)
		{
		}
		return fileInput;
	}
	
	public static void verifyDownloadedDocument(WebDriver driver, ExtentTest logger) throws Exception {
		  
	     Thread.sleep(10000);
	     File getLatestFile = getLatestFilefromDir(downloadPath);
	     String fileName = getLatestFile.getName();
	     System.out.println(fileName);
	     logger.log(LogStatus.INFO, "Downloaded file name is: "+fileName);
	     Assert.assertTrue(fileName.contains("Document"), "Downloaded file name is not matching with expected file name");
	 }
public boolean isFileDownloaded(String downloadPath, String fileName) {
	 boolean flag = false;
	    File dir = new File(downloadPath);
	    File[] dir_contents = dir.listFiles();
	     
	    for (int i = 0; i < dir_contents.length; i++) {
	        if (dir_contents[i].getName().equals(fileName))
	            return flag=true;
	            }

	    return flag;
	}

	private boolean isFileDownloaded_Ext(String dirPath, String ext){
	 boolean flag=false;
	    File dir = new File(dirPath);
	    File[] files = dir.listFiles();
	    if (files == null || files.length == 0) {
	        flag = false;
	    }
	   
	    for (int i = 1; i < files.length; i++) {
	     if(files[i].getName().contains(ext)) {
	      flag=true;
	     }
	    }
	    return flag;
	}

	private static File getLatestFilefromDir(String dirPath){
	    File dir = new File(dirPath);
	    File[] files = dir.listFiles();
	    if (files == null || files.length == 0) {
	        return null;
	    }

	    File lastModifiedFile = files[0];
	    for (int i = 1; i < files.length; i++) {
	       if (lastModifiedFile.lastModified() < files[i].lastModified()) {
	           lastModifiedFile = files[i];
	       }
	    }
	    return lastModifiedFile;
	}
}
